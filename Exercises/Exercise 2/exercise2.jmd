---
title: Day-ahead electricity markets (Advanced)
subtitle: 31761 - Renewables in Electricity Markets
author: Jorge Montalvo Arvizu
date: February 17, 2020
---

```julia; results="hidden"
using DataFrames
using Plots
using JuMP
using Gurobi
using MathOptFormat
using LinearAlgebra
using Printf
gr()
```

## Problem 1: Formulating the market clearing more mathematically

Consider the market setup and list of supply offers of Problem 2 (in Exercise
session 1), while assuming that the electric power demand to be met is fixed to
180 MWh.

|Supplier name| Supplier id.| Quantity [MWh]| Price [EUR/MWh]|
|---|---|---|---|
|FlexiGas| G1| 15| 75|
|Nuke22 |G2| 100| 15|
|ShinyPower |G3| 32| 0
|RoskildeCHP |G4| 25| 42|
|BlueWater |G5| 70| 10|

**1.1 What is the most simple way to find the equilibrium point? Intuitevely,
what is the clearing price, who will produce and how much?**

**1.2 Since demand is fixed, what is the objective of the market clearing with
the supply side? Write it as an objective function. Is it a maximization or
minimization problem?**

**1.3 What is the balance condition for the market (between supply and demand)?
Write it as a balance constraint.**

**1.4 Deduce the complete linear program to be used for clearing the market.**

```julia; results="hidden"
supplier = ["FlexiGas","Nuke22","ShinyPower","RoskildeCHP","BlueWater"]
id_G = ["G₁","G₂","G₃","G₄","G₅"]

# Initialize vectors
N_G = size(supplier,1)
n_G = collect(1:N_G)
P_G  = [15,100,32,25,70] # Maximum generation
λ_G = [75,15,0,42,10] # Generation costs in €/MWh
c_G = λ_G
A_eq = transpose(ones(N_G))
A = Array(Diagonal(ones(N_G)))
b_eq = 180 # Demand
b = P_G

# Model
model_supply = Model(with_optimizer(Gurobi.Optimizer))
@variable(model_supply, y_G[j in n_G] >= 0)
@objective(model_supply, Min, transpose(c_G)*y_G)
@constraint(model_supply, generation, A*y_G .<= b)
@constraint(model_supply, balance, A_eq*y_G == b_eq)
optimize!(model_supply)

# Check if optimal solution was found
if termination_status(model_supply) == MOI.OPTIMAL
    println("Optimal solution found!\n")
    println("Generation per supplier:\n")
    for j in n_G
        println("$(supplier[j]): ", value.(y_G[j]), " MWh")
    end
    println("\nObjective value: ", objective_value(model_supply), " €")
    println("\nMarket equilibrium: ", dual(balance), " €/MWh")
    else
        error("No solution.")
end

#plot(bidsSupplier.AggregatedQ,bidsSupplier.Price,w=2,t=:steppre, xlim=(0,sum(bidsSupplier.Quantity)), xlab="Quantity [MWh]", ylab="Price [EUR/MWh]", color="darkred", legend=false)
```

As an extension, we now consider that the list of demand offers that is given in
Problem 3 of Exercise session 1.

|Demand name| Demand id.| Quantity [MWh]| Price [EUR/MWh]|
|---|---|---|---|
|WeLovePower| D1| 35| 65|
|CleanCharge| D2| 23| 78|
|JyskeEl| D3| 12| 10|
|ElRetail| D4| 38| 46|
|QualiWatt| D5| 43| 63|
|IntelliWatt| D6| 16| 32|
|El-Forbundet| D7| 57| 50|

**1.5 What should be the objective function of the market-clearing (since having
to consider both supply and demand sides)? Write it as an objective function. Is
it a miximization or minimization problem?**

**1.6 What is the balance condition for the market (between supply and demand)?
Write it as a balance constraint.**

**1.7 Deduce the complete linear program to be used for clearing the market.**

```julia; results="hidden"
consumer = ["WeLovePower","CleanCharge","JyskeEl","ElRetail","QualiWatt","IntelliWatt", "El-Forbundet"]
id_D = ["D₁","D₂","D₃","D₄","D₅","D₆","D₇"]

# Initialize vectors
N_D = size(consumer,1)
n_D = collect(1:N_D)
n = collect(1:(N_G+N_D))
P_D  = [35,23,12,38,43,16,57]
λ_D = [65,78,10,46,63,32,50]
c = vcat(λ_G,-λ_D)
A_eq = transpose(vcat(ones(N_G),-ones(N_D)))
A = Array(Diagonal(ones(N_G+N_D)))
b = vcat(P_G,P_D)
b_eq = 0

# Model
model_supplydemand = Model(with_optimizer(Gurobi.Optimizer))
@variable(model_supplydemand, y[j in n] >= 0)
@objective(model_supplydemand, Min, transpose(c)*y)
@constraint(model_supplydemand, generation, A*y .<= b)
@constraint(model_supplydemand, balance, A_eq*y == b_eq)
optimize!(model_supplydemand)

# Model output
if termination_status(model_supplydemand) == MOI.OPTIMAL
    println("Optimal solution found!\n")
    println("Generation and Demand:\n")
    for j in n_G
        println("$(id_G[j]): ", value.(y[j]), " MWh")
    end
    for i in n_D
        println("$(id_D[i]): ", value.(y[i]), " MWh")
    end
    println("\nObjective value: ", objective_value(model_supplydemand), " €")
    println("\nMarket equilibrium: ", dual(balance), " €/MWh")
    else
        error("No solution.")
end

power = Array(n)
for k in n
    power[k]=value.(y)[k]
end

# Data Frames
df_G = DataFrame(Supplier=supplier,ID_G=id_G,Offer_G=P_G,Price_G=λ_G,Schedule_G=power[1:N_G],Market_G=fill(dual(balance),N_G))
df_D = DataFrame(Consumer=consumer,ID_D=id_D,Offer_D=P_D,Price_D=λ_D,Schedule_D=power[N_G+1:maximum(n)],Market_D=fill(dual(balance),N_D))
df_G.PayAsBid_G = df_G.Schedule_G.*df_G.Price_G
df_G.UniformPricing_G = df_G.Schedule_G.*df_G.Market_G
df_D.PayAsBid_D = df_D.Schedule_D.*df_D.Price_D
df_D.UniformPricing_D = df_D.Schedule_D.*df_D.Market_D

#plot(bidsSupplier.AggregatedQ,bidsSupplier.Price,w=2,t=:steppre, xlim=(0,sum(bidsSupplier.Quantity)), xlab="Quantity [MWh]", ylab="Price [EUR/MWh]", color="darkred", legend=false)
```

## Problem 2: Settlement and revenues

The market has been cleared for this time unit (between 2pm and 3pm the
following day) based on the list of suppy and demand offers given in Problems 2
and 3 of Exercise session 1. It is now time figure out how much the various
participants will be paid, or will have to pay...

**2.1 Look through the lecture slides, and define the difference between
"pay-as-bid" and "uniform pricing".**

**2.2 Determine the revenues of various market participants on the supply side
under uniform pricing settlement. What if using pay-as-bid instead?**

**2.3 Determine the payments for various market participants on the demand side
under uniform pricing settlement. What if using pay-as-bid instead?**
